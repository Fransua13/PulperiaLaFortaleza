/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyectopulperialafortaleza;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
/**
 *
 * @author isaac
 */
public class PersonaConsultas extends javax.swing.JFrame {
    Conexion conectar;
    Connection conexion;
    
    DefaultTableModel tableModel;
    /**
     * Creates new form FormRegistroBusqueda
     */
    public PersonaConsultas() {
        initComponents();
        
        conectar = new Conexion();
        conexion=conectar.establecerConexion();
        
        
        tableModel = new DefaultTableModel();
        jtbBusquedaPer.setModel(tableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblFiltros = new javax.swing.JLabel();
        cbxPerCargo = new javax.swing.JComboBox<>();
        txtBusqueda = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbBusquedaPer = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(144, 202, 249));

        jLabel2.setFont(new java.awt.Font("Microsoft Himalaya", 1, 60)); // NOI18N
        jLabel2.setText("Consultas Personas");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(307, 307, 307)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel2)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        jLabel1.setText("BÃºsquedas:");

        lblFiltros.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        lblFiltros.setText("Filtros:");

        cbxPerCargo.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        cbxPerCargo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Personas:", "Cliente", "Empleado", " " }));
        cbxPerCargo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPerCargoActionPerformed(evt);
            }
        });

        txtBusqueda.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyReleased(evt);
            }
        });

        jtbBusquedaPer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtbBusquedaPer);

        jButton2.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnRegresar.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dubai", 0, 14)); // NOI18N
        jLabel3.setText("Buscar");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFiltros)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBusqueda, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                                    .addComponent(cbxPerCargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(532, 532, 532))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnRegresar)
                                .addGap(212, 212, 212)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 930, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFiltros)
                    .addComponent(cbxPerCargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(btnSalir)
                    .addComponent(btnRegresar))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void cbxPerCargoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPerCargoActionPerformed
     cargarTablas();
     cargarInformacion();
    }//GEN-LAST:event_cbxPerCargoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    txtBusqueda.setText("");
    tableModel.setRowCount(0); // Elimina todas las filas de la tabla
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtBusquedaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyReleased
       filtrarInformacion(); 
    }//GEN-LAST:event_txtBusquedaKeyReleased

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        Persona a = new Persona();
        a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    
//Este metodo carga las tablas del cliente o Empleado dependiendo de su seleccion en el combobox.  
  private void cargarTablas() {
    // Obtener la selecciÃ³n del JComboBox
    String seleccion = (String) cbxPerCargo.getSelectedItem();

    // Limpiar el JTable antes de cargar nuevos datos
    tableModel.setColumnCount(0);
    // No se limpian las filas para mantener los datos existentes

    // Realizar la consulta segÃºn la selecciÃ³n
    if (seleccion.equals("Cliente")) {
        // Si se selecciona Cliente, se agregan las columnas correspondientes al modelo de la tabla
        tableModel.addColumn("Identidad");
        tableModel.addColumn("Nombre");
        tableModel.addColumn("Fecha de nacimiento");
        tableModel.addColumn("Edad");
        tableModel.addColumn("Sexo");
        tableModel.addColumn("TelÃ©fono");
        tableModel.addColumn("RTN");
    } else if (seleccion.equals("Empleado")) {
        // Si se selecciona Empleado, se agregan las columnas correspondientes al modelo de la tabla
        tableModel.addColumn("Identidad");
        tableModel.addColumn("Nombre");
        tableModel.addColumn("Fecha de nacimiento");
        tableModel.addColumn("Edad");
        tableModel.addColumn("Sexo");
        tableModel.addColumn("TelÃ©fono");
        tableModel.addColumn("Estado");
        tableModel.addColumn("Salario");
        tableModel.addColumn("DirecciÃ³n");
        tableModel.addColumn("Cargo");
        tableModel.addColumn("Horario");
    } else {
        // Si no se selecciona ni Cliente ni Empleado, limpiar las columnas pero mantener las filas
        tableModel.setColumnCount(0);
    }
}

private void cargarInformacion() {
    // Limpiar el JTable antes de cargar nuevos datos
    tableModel.setRowCount(0); // Limpiamos las filas

    // Realizar la consulta segÃºn la selecciÃ³n del JComboBox
    String seleccion = (String) cbxPerCargo.getSelectedItem();
    String query = "";
    if (seleccion.equals("Cliente")) {
        query = "SELECT P.identidad, P.nombre_pers, " +
                "TO_CHAR(P.fecha_nacimiento, 'DD-MM-YYYY') AS fecha_nacimiento, " +
                "P.edad_pers, " +
                "CASE WHEN P.sexo_pers THEN 'Masculino' ELSE 'Femenino' END AS sexo, " +
                "P.telefono_pers, C.RTN " +
                "FROM Persona P INNER JOIN Cliente C ON P.identidad = C.idCliente";
    } else if (seleccion.equals("Empleado")) {
        query = "SELECT P.identidad, P.nombre_pers, " +
                "TO_CHAR(P.fecha_nacimiento, 'DD-MM-YYYY') AS fecha_nacimiento, " +
                "P.edad_pers, " +
                "CASE WHEN P.sexo_pers THEN 'Masculino' ELSE 'Femenino' END AS sexo, " +
                "P.telefono_pers, " +
                "CASE WHEN E.estado THEN 'Disponible' ELSE 'No Disponible' END AS estado, " +
                "E.salario, E.direccion_emple, " +
                "Cargo.nombre_Cargo, Horario.nombre_Horario " +
                "FROM Persona P " +
                "INNER JOIN Empleado E ON P.identidad = E.idEmpleado " +
                "INNER JOIN Cargo ON E.idCargo = Cargo.idCargo " +
                "INNER JOIN Horario ON E.idHorario = Horario.idHorario";
    } else {
        // Si no se selecciona ni Cliente ni Empleado, salir del mÃ©todo
        return;
    }

    try {
        // Crear la declaraciÃ³n SQL y ejecutarla
        PreparedStatement statement = conexion.prepareStatement(query);
        ResultSet resultSet = statement.executeQuery();

        // Iterar sobre los resultados y agregarlos al tableModel
        while (resultSet.next()) {
            Object[] fila = new Object[tableModel.getColumnCount()];
            for (int i = 0; i < fila.length; i++) {
                fila[i] = resultSet.getObject(i + 1);
            }
            tableModel.addRow(fila);
        }

        // Cerrar los recursos
        resultSet.close();
        statement.close();
    } catch (SQLException ex) {
        // Manejar cualquier error de SQL
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar datos: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


 
//Este metodo es el encargado de filtrar la informacion, por medio de la consulta like.
private void filtrarInformacion() {
    // Limpiar el JTable antes de cargar nuevos datos
    tableModel.setRowCount(0); // Limpiamos las filas
    cargarTablas(); // Configurar las columnas del JTable

    // Obtener la selecciÃ³n del JComboBox
    String seleccion = (String) cbxPerCargo.getSelectedItem();

    if (seleccion.equals("Cliente")) {
        filtrarCliente();
    } else if (seleccion.equals("Empleado")) {
        filtrarEmpleado();
    }
}

 private void filtrarCliente() {
    // Limpiar el JTable antes de cargar nuevos datos
    tableModel.setRowCount(0); // Limpiamos las filas

    String filtro = "%" + txtBusqueda.getText().toLowerCase() + "%"; // Filtro LIKE con texto de bÃºsqueda

String query = "SELECT " +
                   "P.identidad, " +
                   "P.nombre_pers, " +
                   "TO_CHAR(P.fecha_nacimiento, 'DD-MM-YYYY') AS fecha_nacimiento, " +
                   "P.edad_pers, " +
                   "CASE WHEN P.sexo_pers THEN 'Masculino' ELSE 'Femenino' END AS sexo, " +
                   "P.telefono_pers, " +
                   "C.RTN " +
               "FROM " +
                   "Persona P " +
                   "INNER JOIN Cliente C ON P.identidad = C.idCliente " +
               "WHERE " +
                   "LOWER(P.identidad) LIKE ? " +
                   "OR LOWER(P.nombre_pers) LIKE ? " +
                   "OR TO_CHAR(P.fecha_nacimiento, 'DD-MM-YYYY') LIKE ? " +
                   "OR LOWER(P.edad_pers) LIKE ? " +
                   "OR CASE WHEN P.sexo_pers THEN 'masculino' ELSE 'femenino' END LIKE ? " +
                   "OR LOWER(P.telefono_pers) LIKE ? " +
                   "OR LOWER(C.RTN) LIKE ?";

    try {
        // Crear la declaraciÃ³n SQL y ejecutarla
        PreparedStatement statement = conexion.prepareStatement(query);
        // Enlazar el filtro a cada parÃ¡metro de bÃºsqueda
        for (int i = 1; i <= 7; i++) {
            statement.setString(i, filtro);
        }

        ResultSet resultSet = statement.executeQuery();

        // Iterar sobre los resultados y agregarlos al tableModel
        while (resultSet.next()) {
            Object[] fila = new Object[tableModel.getColumnCount()];
            for (int i = 0; i < fila.length; i++) {
                // Si la columna es "fecha_nacimiento", formatear la fecha como DD-MM-YYYY
                if (tableModel.getColumnName(i).equals("fecha_nacimiento")) {
                    fila[i] = resultSet.getDate("fecha_nacimiento").toString();
                }
                // Si la columna es "edad_pers", convertir a String
                else if (tableModel.getColumnName(i).equals("edad_pers")) {
                    fila[i] = String.valueOf(resultSet.getInt("edad_pers"));
                }
                // Si la columna es "estado", obtener el valor y transformarlo a "Disponible" o "No Disponible"
                else if (tableModel.getColumnName(i).equals("estado")) {
                    boolean estado = resultSet.getBoolean("estado");
                    fila[i] = estado ? "Disponible" : "No Disponible";
                } else {
                    fila[i] = resultSet.getObject(i + 1);
                }
            }
            tableModel.addRow(fila);
        }

        // Cerrar los recursos
        resultSet.close();
        statement.close();
    } catch (SQLException ex) {
        // Manejar cualquier error de SQL
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al filtrar datos: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void filtrarEmpleado() {
    // Limpiar el JTable antes de cargar nuevos datos
    tableModel.setRowCount(0); // Limpiamos las filas

    String filtro = "%" + txtBusqueda.getText().toLowerCase() + "%"; // Filtro LIKE con texto de bÃºsqueda

    String query = "SELECT " +
                   "P.identidad, " +
                   "P.nombre_pers, " +
                   "TO_CHAR(P.fecha_nacimiento, 'DD-MM-YYYY') AS fecha_nacimiento, " +
                   "P.edad_pers, " +
                   "CASE WHEN P.sexo_pers THEN 'Masculino' ELSE 'Femenino' END AS sexo, " +
                   "P.telefono_pers, " +
                   "CASE WHEN E.estado THEN 'Disponible' ELSE 'No Disponible' END AS estado, " +
                   "E.salario, " +
                   "E.direccion_emple, " +
                   "Cargo.nombre_Cargo, " + // Seleccionar el nombre del cargo en lugar del ID
                   "Horario.nombre_Horario " + // Seleccionar el nombre del horario en lugar del ID
               "FROM " +
                   "Persona P " +
                   "INNER JOIN Empleado E ON P.identidad = E.idEmpleado " +
                   "INNER JOIN Cargo ON E.idCargo = Cargo.idCargo " + // Unir la tabla Cargo
                   "INNER JOIN Horario ON E.idHorario = Horario.idHorario " + // Unir la tabla Horario
               "WHERE " +
                   "LOWER(P.identidad) LIKE ? " +
                   "OR LOWER(P.nombre_pers) LIKE ? " +
                   "OR TO_CHAR(P.fecha_nacimiento, 'DD-MM-YYYY') LIKE ? " +
                   "OR LOWER(P.edad_pers) LIKE ? " +
                   "OR CASE WHEN P.sexo_pers THEN 'masculino' ELSE 'femenino' END LIKE ? " +
                   "OR LOWER(P.telefono_pers) LIKE ? " +
                   "OR LOWER(E.direccion_emple) LIKE ? " +
                   "OR LOWER(CAST(E.salario AS TEXT)) LIKE ? " +
                   "OR LOWER(Cargo.nombre_Cargo) LIKE ? " + // Buscar por nombre de cargo
                   "OR LOWER(Horario.nombre_Horario) LIKE ? " + // Buscar por nombre de horario
                   "OR LOWER(CASE WHEN E.estado THEN 'Disponible' ELSE 'No Disponible' END) LIKE ?"; // Cambiado a LIKE

    try {
        // Crear la declaraciÃ³n SQL y ejecutarla
        PreparedStatement statement = conexion.prepareStatement(query);
        // Enlazar el filtro a cada parÃ¡metro de bÃºsqueda
        for (int i = 1; i <= 11; i++) {
            statement.setString(i, filtro);
        }

        ResultSet resultSet = statement.executeQuery();

        // Iterar sobre los resultados y agregarlos al tableModel
        while (resultSet.next()) {
            Object[] fila = new Object[tableModel.getColumnCount()];
            for (int i = 0; i < fila.length; i++) {
                // Si la columna es "fecha_nacimiento", formatear la fecha como DD-MM-YYYY
                if (tableModel.getColumnName(i).equals("fecha_nacimiento")) {
                    fila[i] = resultSet.getDate("fecha_nacimiento").toString();
                }
                // Si la columna es "edad_pers", convertir a String
                else if (tableModel.getColumnName(i).equals("edad_pers")) {
                    fila[i] = String.valueOf(resultSet.getInt("edad_pers"));
                }
                // Si la columna es "estado", obtener el valor y transformarlo a "Disponible" o "No Disponible"
                else if (tableModel.getColumnName(i).equals("estado")) {
                    String estado = resultSet.getString("estado");
                    fila[i] = estado.equals("Disponible") ? "Disponible" : "No Disponible";
                } else {
                    fila[i] = resultSet.getObject(i + 1);
                }
            }
            tableModel.addRow(fila);
        }

        // Cerrar los recursos
        resultSet.close();
        statement.close();
    } catch (SQLException ex) {
        // Manejar cualquier error de SQL
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al filtrar datos: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}









 
 
 public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Persona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Persona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Persona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Persona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PersonaConsultas().setVisible(true);
            }
        });
    }


 
 
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cbxPerCargo;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtbBusquedaPer;
    private javax.swing.JLabel lblFiltros;
    private javax.swing.JTextField txtBusqueda;
    // End of variables declaration//GEN-END:variables
}
