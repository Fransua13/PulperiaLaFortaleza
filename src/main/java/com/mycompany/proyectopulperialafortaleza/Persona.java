/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyectopulperialafortaleza;

import java.text.SimpleDateFormat;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.Period;
  
public class Persona extends javax.swing.JFrame {
    
    Conexion conectar;
    Connection conexion;
    
    
   
        public Persona() {
        initComponents();
        conectar = new Conexion();
        conexion=conectar.establecerConexion();
        
      
       
        botonesSexo.add(jrbMasculino);
        botonesSexo.add(jrbFemenino);
        estado.add(rdbDisponible);
        estado.add(rdbNoDisponible);
        jPanel3.setVisible(false);
        jPanel4.setVisible(false);
    }
   
/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        estado = new javax.swing.ButtonGroup();
        botonesSexo = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblDatosGenerales = new javax.swing.JLabel();
        lblIdentidad = new javax.swing.JLabel();
        txtIdentidad = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblNacimiento = new javax.swing.JLabel();
        txtNacimiento = new javax.swing.JTextField();
        lblTelefono = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        calNacimiento = new com.toedter.calendar.JCalendar();
        lblSexo = new javax.swing.JLabel();
        jrbMasculino = new javax.swing.JRadioButton();
        jrbFemenino = new javax.swing.JRadioButton();
        cbxPersona = new javax.swing.JComboBox<>();
        lblSexo1 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lblRTN = new javax.swing.JLabel();
        txtRTN = new javax.swing.JTextField();
        lblAlumno = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        lblSalario = new javax.swing.JLabel();
        txtSalario = new javax.swing.JTextField();
        lblDireccion = new javax.swing.JLabel();
        rdbDisponible = new javax.swing.JRadioButton();
        txtDireccion = new javax.swing.JTextField();
        rdbNoDisponible = new javax.swing.JRadioButton();
        lblEstado = new javax.swing.JLabel();
        lblEmpleado = new javax.swing.JLabel();
        cbxCargo = new javax.swing.JComboBox<>();
        cbxHorario = new javax.swing.JComboBox<>();
        btnConsultaPer = new javax.swing.JButton();
        btnMenuPrinicipal = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(144, 202, 249));

        jLabel2.setFont(new java.awt.Font("Microsoft Himalaya", 1, 60)); // NOI18N
        jLabel2.setText("Registro Personas");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(278, 278, 278)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(251, 251, 251))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(232, 232, 232));

        lblDatosGenerales.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        lblDatosGenerales.setText("Datos Generales:");

        lblIdentidad.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblIdentidad.setText("Identidad:");

        txtIdentidad.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N

        lblNombre.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblNombre.setText("Nombre:");

        txtNombre.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N

        lblNacimiento.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblNacimiento.setText("Fecha de Nacimiento:");

        txtNacimiento.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N

        lblTelefono.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblTelefono.setText("Numero de Telefono:");

        txtTelefono.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N

        calNacimiento.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calNacimientoPropertyChange(evt);
            }
        });

        lblSexo.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblSexo.setText("Sexo:");

        jrbMasculino.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jrbMasculino.setText("Masculino");

        jrbFemenino.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jrbFemenino.setText("Femenino");
        jrbFemenino.setPreferredSize(new java.awt.Dimension(37, 33));

        cbxPersona.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        cbxPersona.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar:", "Cliente", "Empleado", " " }));
        cbxPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPersonaActionPerformed(evt);
            }
        });

        lblSexo1.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblSexo1.setText("Categoria:");

        btnGuardar.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnModificar.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnLimpiar.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblSexo1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblDatosGenerales, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblIdentidad, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                                    .addComponent(txtIdentidad)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jrbMasculino, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jrbFemenino, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNacimiento)
                                    .addComponent(lblTelefono))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTelefono)
                                    .addComponent(txtNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addComponent(calNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(lblDatosGenerales)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(calNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblIdentidad)
                                    .addComponent(txtIdentidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblNombre)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblNacimiento)
                                    .addComponent(txtNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblTelefono)
                                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jrbMasculino)
                                    .addComponent(jrbFemenino, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxPersona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSexo1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(46, 46, 46)))
                .addContainerGap())
        );

        lblIdentidad.getAccessibleContext().setAccessibleName("lblIdentidad");
        lblNombre.getAccessibleContext().setAccessibleName("lblNombre");
        txtNombre.getAccessibleContext().setAccessibleName("txtNombre");
        lblNacimiento.getAccessibleContext().setAccessibleName("lblNacimiento");

        jPanel3.setBackground(new java.awt.Color(232, 232, 232));

        lblRTN.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblRTN.setText("RTN:");

        txtRTN.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N

        lblAlumno.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        lblAlumno.setText("Cliente:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblRTN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRTN, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(lblAlumno)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRTN)
                    .addComponent(txtRTN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        jPanel4.setBackground(new java.awt.Color(232, 232, 232));

        lblSalario.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblSalario.setText("Salario");

        txtSalario.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N

        lblDireccion.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblDireccion.setText("Direccion:");

        rdbDisponible.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rdbDisponible.setText("Disponible");
        rdbDisponible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbDisponibleActionPerformed(evt);
            }
        });

        txtDireccion.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N

        rdbNoDisponible.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rdbNoDisponible.setText("No Disponible");
        rdbNoDisponible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbNoDisponibleActionPerformed(evt);
            }
        });

        lblEstado.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblEstado.setText("Estado:");

        lblEmpleado.setFont(new java.awt.Font("Malgun Gothic", 1, 18)); // NOI18N
        lblEmpleado.setText("Empleado:");

        cbxCargo.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        cbxCargo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cargo:", "Gerente", "Cajero(a)", "Chef", "Limpieza", "Lavaplatos" }));
        cbxCargo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCargoActionPerformed(evt);
            }
        });

        cbxHorario.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        cbxHorario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Horario:", "Matutino", "Vespertino", "Nocturno", "" }));
        cbxHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxHorarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(cbxCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbxHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                    .addComponent(lblEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rdbDisponible)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rdbNoDisponible))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblDireccion)
                                        .addComponent(lblSalario))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtDireccion)
                                        .addComponent(txtSalario)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblEmpleado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDireccion)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSalario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEstado)
                    .addComponent(rdbDisponible, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdbNoDisponible, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxCargo)
                    .addComponent(cbxHorario))
                .addContainerGap())
        );

        btnConsultaPer.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        btnConsultaPer.setText("Consultas");
        btnConsultaPer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaPerActionPerformed(evt);
            }
        });

        btnMenuPrinicipal.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        btnMenuPrinicipal.setText("Menu Principal");
        btnMenuPrinicipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuPrinicipalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnMenuPrinicipal, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConsultaPer, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMenuPrinicipal)
                    .addComponent(btnConsultaPer))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calNacimientoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calNacimientoPropertyChange
        // TODO add your handling code here:
        if(evt.getOldValue()!=null){
            SimpleDateFormat ff = new SimpleDateFormat("yyyy-MM-dd");
            txtNacimiento.setText(ff.format(calNacimiento.getCalendar().getTime()));
        }
    }//GEN-LAST:event_calNacimientoPropertyChange

    private void rdbDisponibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbDisponibleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbDisponibleActionPerformed

    private void cbxHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxHorarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxHorarioActionPerformed

    private void rdbNoDisponibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbNoDisponibleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbNoDisponibleActionPerformed

    private void cbxCargoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCargoActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cbxCargoActionPerformed

    private void cbxPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPersonaActionPerformed
     String persona = cbxPersona.getSelectedItem().toString();
     visible(persona);

    }//GEN-LAST:event_cbxPersonaActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
    guardar();
    guardarHijas();
    limpiar();

    }//GEN-LAST:event_btnGuardarActionPerformed
  
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
    buscarDNI();
    buscarDNIHijas();    
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminarHijas();
        eliminar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        modificar();
        modificarHijas();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnConsultaPerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaPerActionPerformed
        PersonaConsultas a = new PersonaConsultas();
        a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnConsultaPerActionPerformed

    private void btnMenuPrinicipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuPrinicipalActionPerformed
        FormMenuPrincipal a = new FormMenuPrincipal();
        a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnMenuPrinicipalActionPerformed

    private void limpiar() {
    txtIdentidad.setText("");
    txtNombre.setText("");
    txtNacimiento.setText("");
    jrbFemenino.setSelected(false);
    jrbMasculino.setSelected(false);
    txtTelefono.setText("");
    txtRTN.setText("");
    txtDireccion.setText("");
    txtSalario.setText("");
    rdbDisponible.setSelected(false);
    rdbNoDisponible.setSelected(false);
    cbxPersona.setSelectedIndex(0);
    cbxCargo.setSelectedIndex(0);
    cbxHorario.setSelectedIndex(0); 
    }
    
    
    
private void visible(String persona) {
    switch (persona) {
        case "Cliente":
            mostrarInterfazCliente();
            break;

        case "Empleado":
            mostrarInterfazEmpleado();
            break;

        case "Seleccionar:":
            mostrarInterfazSeleccionar();
            break;
    }
}

private void mostrarInterfazCliente() {
    jPanel4.setVisible(false);
    jPanel3.setVisible(true);

}

private void mostrarInterfazEmpleado() {
    jPanel4.setVisible(true);
    jPanel3.setVisible(false);
;
}

private void mostrarInterfazSeleccionar() {
    jPanel4.setVisible(false);
    jPanel3.setVisible(false);

}
    
    
    
    

public void guardar() {
    try {
        String identidad = txtIdentidad.getText();
        String nombres = txtNombre.getText();
        String fechaNacimiento = txtNacimiento.getText();
        
        // Obtener la fecha actual
        LocalDate fechaActual = LocalDate.now();
        
        // Convertir la fecha de nacimiento a LocalDate
        LocalDate fechaNac = LocalDate.parse(fechaNacimiento);
        
        // Calcular la diferencia de años entre la fecha actual y la fecha de nacimiento
        int edad = Period.between(fechaNac, fechaActual).getYears();

        boolean sexo = jrbMasculino.isSelected(); // True for Masculino, False for Femenino
        String telefono = txtTelefono.getText();

        String sentenciaSQL = "INSERT INTO Persona(dni, nombre_pers, fecha_nacimiento, edad_pers, sexo_pers, telefono_pers)"
                + " VALUES ('"+identidad+"', '"+nombres+"', '"+fechaNacimiento+"', '"+edad+"', '"+sexo+"', '"+telefono+"')";

        PreparedStatement sentencia = conexion.prepareStatement(sentenciaSQL);

        sentencia.executeUpdate();
        JOptionPane.showMessageDialog(null, "Se ha guardado la información correctamente");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al guardar la información: " + e.toString());
    }
}


public void guardarHijas() {
    String identidad = txtIdentidad.getText();
    int categoriaIndex = cbxPersona.getSelectedIndex();

    try {
        switch (categoriaIndex) {
            
            case 1 -> {
               // Insertar datos del Cliente
               String RTN = txtRTN.getText();
               String sentenciaCliente = "INSERT INTO Cliente(dni_cliente, RTN) VALUES ('" + identidad + "', '" + RTN + "')";
               PreparedStatement sentencia2 = conexion.prepareStatement(sentenciaCliente);
               sentencia2.executeUpdate();
            }
            
            case 2 -> {
                // Insertar datos del Empleado
                String direccion = txtDireccion.getText();
                boolean estados = rdbDisponible.isSelected();
                String cargo = (String) cbxCargo.getSelectedItem();
                float salario = Float.parseFloat(txtSalario.getText());
                
                // Convertir el cargo a valor smallint
                int valorCargo;
                valorCargo = switch (cargo) {
                case "Gerente" -> 1;
                case "Cajero(a)" -> 2;
                case "Chef" -> 3;
                case "Limpieza" -> 4;
                case "Lavaplatos" -> 5;
                default -> 0;
            }; // Valor por defecto en caso de selección no válida
                
                // Convertir el horario a valor smallint
                String horario = (String) cbxHorario.getSelectedItem();
                int valorHorario;
                valorHorario = switch (horario) {
                case "Matutino" -> 1;
                case "Vespertino" -> 2;
                case "Nocturno" -> 3;
                default -> 0;
            }; // Valor por defecto en caso de selección no válida
                
                // Preparar y ejecutar la sentencia SQL para insertar los datos del empleado
                String sentenciaEmpleado = "INSERT INTO Empleado(dni_empleado, estado, salario, direccion_emple, idCargo, idHorario) "
                        + "VALUES ('" + identidad + "', '" + estados + "', " + salario + ", '" + direccion + "', " + valorCargo + ", " + valorHorario + ")";
                PreparedStatement sentencia = conexion.prepareStatement(sentenciaEmpleado);
                sentencia.executeUpdate();
            }
               
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al guardar los datos: " + e.toString());
    }
}

public void modificar() {
    try {
        String identidad = txtIdentidad.getText();
        String nombres = txtNombre.getText();
        String fechaNacimientoStr = txtNacimiento.getText();
        
        // Convertir la cadena de fecha de nacimiento a LocalDate
        LocalDate fechaNacimiento = LocalDate.parse(fechaNacimientoStr);

        // Obtener la fecha actual
        LocalDate fechaActual = LocalDate.now();
        
        // Calcular la diferencia de años entre la fecha actual y la fecha de nacimiento
        int edad = Period.between(fechaNacimiento, fechaActual).getYears();

        boolean sexo = jrbMasculino.isSelected();
        String telefono = txtTelefono.getText();

        // Sentencia SQL para actualizar los datos de la persona
        String sentenciaSQL = "UPDATE Persona SET nombre_pers = ?, fecha_nacimiento = ?, edad_pers = ?, sexo_pers = ?, telefono_pers = ? WHERE dni = ?";
        
        PreparedStatement sentencia = conexion.prepareStatement(sentenciaSQL);
        sentencia.setString(1, nombres);
        sentencia.setObject(2, fechaNacimiento); // Establecer la fecha de nacimiento como un objeto LocalDate
        sentencia.setInt(3, edad); // Establecer la edad de la persona
        sentencia.setBoolean(4, sexo);
        sentencia.setString(5, telefono);
        sentencia.setString(6, identidad);

        int filasActualizadas = sentencia.executeUpdate();
        
        if (filasActualizadas > 0) {
            JOptionPane.showMessageDialog(null, "Se ha modificado la información correctamente");
        } else {
            JOptionPane.showMessageDialog(null, "No se ha encontrado ninguna persona con el DNI proporcionado");
        }
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al modificar la información: " + e.toString());
    }
}



public void modificarHijas() {
    String identidad = txtIdentidad.getText();
    int categoriaIndex = cbxPersona.getSelectedIndex();

    try {
        switch (categoriaIndex) {
            case 1: // Modificar datos del Cliente
                String RTN = txtRTN.getText();

                // Impresiones de depuración
                System.out.println("Identidad (Cliente): " + identidad);
                System.out.println("RTN: " + RTN);

                // Preparar y ejecutar la sentencia SQL para modificar los datos del cliente
                String sentenciaCliente = "UPDATE Cliente SET RTN = ? WHERE dni_cliente = ?";
                PreparedStatement sentencia2 = conexion.prepareStatement(sentenciaCliente);
                sentencia2.setString(1, RTN);
                sentencia2.setString(2, identidad);
                sentencia2.executeUpdate();
                break;
            case 2: // Modificar datos del Empleado
                String direccion = txtDireccion.getText();
                boolean estados = rdbDisponible.isSelected();
                String cargo = (String) cbxCargo.getSelectedItem();
                float salario = Float.parseFloat(txtSalario.getText());

                // Convertir el cargo a valor smallint
                int valorCargo;
                switch (cargo) {
                    case "Gerente":
                        valorCargo = 1;
                        break;
                    case "Cajero(a)":
                        valorCargo = 2;
                        break;
                    case "Chef":
                        valorCargo = 3;
                        break;
                    case "Limpieza":
                        valorCargo = 4;
                        break;
                    case "Lavaplatos":
                        valorCargo = 5;
                        break;
                    default:
                        valorCargo = 0; // Valor por defecto en caso de selección no válida
                        break;
                }
                // Convertir el horario a valor smallint
                String horario = (String) cbxHorario.getSelectedItem();
                int valorHorario;
                switch (horario) {
                    case "Matutino":
                        valorHorario = 1;
                        break;
                    case "Vespertino":
                        valorHorario = 2;
                        break;
                    case "Nocturno":
                        valorHorario = 3;
                        break;
                    default:
                        valorHorario = 0; // Valor por defecto en caso de selección no válida
                        break;
                }
                // Preparar y ejecutar la sentencia SQL para modificar los datos del empleado
                String sentenciaEmpleado = "UPDATE Empleado SET estado = ?, salario = ?, direccion_emple = ?, idCargo = ?, idHorario = ? "
                        + "WHERE dni_empleado = ?";
                PreparedStatement sentencia = conexion.prepareStatement(sentenciaEmpleado);
                sentencia.setBoolean(1, estados);
                sentencia.setFloat(2, salario);
                sentencia.setString(3, direccion);
                sentencia.setInt(4, valorCargo);
                sentencia.setInt(5, valorHorario);
                sentencia.setString(6, identidad);
                sentencia.executeUpdate();
                break;
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al modificar los datos: " + e.toString());
    }
}



public void buscarDNI() {
    Statement consulta = null;
    ResultSet buscar = null;
    try {
        consulta = conexion.createStatement();
        String identidad = txtIdentidad.getText(); // Obtener el DNI del campo de texto
        buscar = consulta.executeQuery("SELECT dni, nombre_pers, fecha_nacimiento, edad_pers, sexo_pers, telefono_pers"
                                      + "  FROM Persona  WHERE identidad = '"+identidad+"' ");
        if (buscar.next()){     
            txtIdentidad.setText(buscar.getString("identidad"));
            txtNombre.setText(buscar.getString("nombre_pers"));   
            txtNacimiento.setText(buscar.getString("fecha_nacimiento"));
            boolean sexo = buscar.getBoolean("sexo_pers");
            if (sexo) {
                jrbMasculino.setSelected(true);
            } else {
                jrbFemenino.setSelected(true);
            }
            txtTelefono.setText(buscar.getString("telefono_pers"));
            JOptionPane.showMessageDialog(null, "Persona encontrada y datos cargados.");
        } else {
            JOptionPane.showMessageDialog(null, "Persona no encontrada.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al buscar datos: " + e.getMessage());
    } finally {
        // Cerrar recursos
        if (consulta != null) {
            try {
                consulta.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (buscar != null) {
            try {
                buscar.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}

public void buscarDNIHijas() {
    PreparedStatement consulta = null;
    ResultSet resultado = null;
    boolean encontradoEmpleado = false; // Booleano para indicar si se encuentra un empleado

    try {
        String identidad = txtIdentidad.getText();
        String consultaEmpleado = "SELECT e.*, c.nombre_Cargo, h.nombre_Horario FROM Empleado e " +
                                  "LEFT JOIN Cargo c ON e.idCargo = c.idCargo " +
                                  "LEFT JOIN Horario h ON e.idHorario = h.idHorario " +
                                  "WHERE e.dni_empleado = ?";
        consulta = conexion.prepareStatement(consultaEmpleado);
        consulta.setString(1, identidad);
        resultado = consulta.executeQuery();

        if (resultado.next()) {
            // Si se encuentra un empleado con el DNI proporcionado
            encontradoEmpleado = true; // Establecer como verdadero
            txtDireccion.setText(resultado.getString("direccion_emple"));
            txtSalario.setText(String.valueOf(resultado.getFloat("salario")));
            // Obtener el estado, cargo y horario
            boolean estado = resultado.getBoolean("estado");
            String cargo = resultado.getString("nombre_Cargo");
            String horario = resultado.getString("nombre_Horario");

            // Asignar el estado al componente correspondiente
            if (estado) {
                rdbDisponible.setSelected(true);
            } else {
                rdbNoDisponible.setSelected(true);
            }

            // Asignar el cargo al ComboBox de cargos
            cbxCargo.setSelectedItem(cargo);

            // Asignar el horario al ComboBox de horarios
            cbxHorario.setSelectedItem(horario);
        } else {
            // Si no se encuentra un empleado, buscar en la tabla de Cliente
            String consultaCliente = "SELECT * FROM Cliente WHERE dni_cliente = ?";
            consulta = conexion.prepareStatement(consultaCliente);
            consulta.setString(1, identidad);
            resultado = consulta.executeQuery();

            if (resultado.next()) {
                // Si se encuentra un cliente con el DNI proporcionado
                // Mostrar el RTN del cliente
                String rtn = resultado.getString("RTN");
                txtRTN.setText(rtn);
            } else {
                // Si no se encuentra ninguna persona con el DNI proporcionado
            }
        }

        // Selección de la categoría basada en si se encontró un empleado o no
        int categoriaIndex = encontradoEmpleado ? 2 : 1;
        cbxPersona.setSelectedIndex(categoriaIndex);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al buscar los datos: " + e.getMessage());
    } finally {
        // Cerrar recursos
        if (consulta != null) {
            try {
                consulta.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (resultado != null) {
            try {
                resultado.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}

public void eliminar() {
    try {
        String identidad = txtIdentidad.getText();
        
        // Verificar si existen registros relacionados en Empleado o Cliente
        boolean empleadoEliminado = eliminarEmpleadoPorPersona(identidad);
        boolean clienteEliminado = eliminarClientePorPersona(identidad);
        
        if (empleadoEliminado || clienteEliminado) {
            // Si se eliminaron registros relacionados, proceder con la eliminación de Persona
            String sentenciaSQL = "DELETE FROM Persona WHERE dni = ?";
            PreparedStatement sentencia = conexion.prepareStatement(sentenciaSQL);
            sentencia.setString(1, identidad);
            int filasEliminadas = sentencia.executeUpdate();

            JOptionPane.showMessageDialog(null, filasEliminadas > 0 ? "Se han eliminado los datos correctamente" : "No se encontró ninguna persona con la identidad proporcionada");
        } else {
            JOptionPane.showMessageDialog(null, "No se encontraron registros relacionados en Empleado o Cliente para la persona con la identidad proporcionada");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al eliminar la información: " + e.toString());
    }
}

public void eliminarHijas() {
    try {
        String identidad = txtIdentidad.getText();
        int categoriaIndex = cbxPersona.getSelectedIndex();

        switch (categoriaIndex) {
            case 1: // Eliminar datos del Empleado
                eliminarEmpleadoPorPersona(identidad);
                break;

            case 2: // Eliminar datos del Cliente
                eliminarClientePorPersona(identidad);
                break;

            default:
                JOptionPane.showMessageDialog(null, "Seleccione una categoría válida.");
                return;
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al eliminar los datos: " + e.toString());
    }
}

private boolean eliminarEmpleadoPorPersona(String identidad) throws SQLException {
    String sentenciaEmpleado = "DELETE FROM Empleado WHERE dni_empleado = ?";
    PreparedStatement sentencia1 = conexion.prepareStatement(sentenciaEmpleado);
    sentencia1.setString(1, identidad);
    int filasEliminadas = sentencia1.executeUpdate();
    return filasEliminadas > 0;
}

private boolean eliminarClientePorPersona(String identidad) throws SQLException {
    String sentenciaCliente = "DELETE FROM Cliente WHERE dni_cliente = ?";
    PreparedStatement sentencia2 = conexion.prepareStatement(sentenciaCliente);
    sentencia2.setString(1, identidad);
    int filasEliminadas = sentencia2.executeUpdate();
    return filasEliminadas > 0;
}




    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Persona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Persona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Persona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Persona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Persona().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup botonesSexo;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnConsultaPer;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnMenuPrinicipal;
    private javax.swing.JButton btnModificar;
    private com.toedter.calendar.JCalendar calNacimiento;
    private javax.swing.JComboBox<String> cbxCargo;
    private javax.swing.JComboBox<String> cbxHorario;
    private javax.swing.JComboBox<String> cbxPersona;
    private javax.swing.ButtonGroup estado;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jrbFemenino;
    private javax.swing.JRadioButton jrbMasculino;
    private javax.swing.JLabel lblAlumno;
    private javax.swing.JLabel lblDatosGenerales;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblEmpleado;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblIdentidad;
    private javax.swing.JLabel lblNacimiento;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblRTN;
    private javax.swing.JLabel lblSalario;
    private javax.swing.JLabel lblSexo;
    private javax.swing.JLabel lblSexo1;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JRadioButton rdbDisponible;
    private javax.swing.JRadioButton rdbNoDisponible;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtIdentidad;
    private javax.swing.JTextField txtNacimiento;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtRTN;
    private javax.swing.JTextField txtSalario;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

}
